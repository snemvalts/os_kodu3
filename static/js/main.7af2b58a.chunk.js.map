{"version":3,"sources":["components/processinput/ProcessInput.tsx","components/spindisplay/SpinDisplay.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ProcessInput","props","useState","processString","setProcessString","selectedProcess","setSelectedProcess","selectedAlgorithm","setSelectedAlgorithm","onRadioClick","event","target","value","onAlgorithmClick","onSubmit","onSubmitted","preventDefault","type","pattern","className","onChange","name","checked","SpinDisplay","canvas","useRef","distance","setDistance","useEffect","ctx","current","getContext","fillStyle","clearRect","width","height","i","font","fillText","paddingY","visits","findIndex","visit","visitsWithReaderHeadStart","totalDistance","lastPos","beginPath","forEach","xPosition","Math","abs","yPosition","length","lineTo","fillRect","stroke","ref","NOOP","sectors","finalSectors","currentPosition","sector","push","SSTF","sectorsToProcess","console","log","sectorSmallestDistance","sectorSmallestDistanceIndex","index","splice","SCAN","forwardOrBackward","found","closestDistance","closestIndex","LOOK","App","diskSpinString","setDiskSpinString","diskPlannerAlgorithm","setDiskPlannerAlgorithm","showSpin","setShowSpin","displayedSectorVisits","setDisplayedSectorVisits","parsedDiskSpinString","parseDiskSpinString","split","map","number","parseInt","algorithm","displayed","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7af2b58a.chunk.js","sourcesContent":["import React, {ChangeEvent, FormEvent} from 'react';\nimport { FunctionComponent, useState } from 'react';\nimport './ProcessInput.css';\nimport { PlannerAlgorithm } from \"../../App\";\n\nconst ProcessInput: FunctionComponent<\n  {\n    onSubmitted: (process: string, type: PlannerAlgorithm) => void\n  }> = (props) => {\n\n  const [processString, setProcessString] = useState('');\n  const [selectedProcess, setSelectedProcess] = useState<'1' | '2' | '3' | ''>('');\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<PlannerAlgorithm>('NOOP');\n\n\n  const onInput = (event: ChangeEvent) => {\n    setSelectedProcess('');\n    setProcessString((event.target as HTMLInputElement).value);\n  };\n\n  const onRadioClick = (event: ChangeEvent) => {\n    const values = {\n      '1': '1,10,44,2,12,3,13,20',\n      '2': '2,5,13,29,7,1,18,40,49,4',\n      '3': '45,6,16,9,33,28,11,37',\n    };\n\n    setSelectedProcess(((event.target as HTMLInputElement).value as '1' | '2' | '3'));\n    setProcessString(values[((event.target as HTMLInputElement).value as '1' | '2' | '3')]);\n  };\n\n  const onAlgorithmClick = (event: ChangeEvent) => {\n    setSelectedAlgorithm((event.target as HTMLInputElement).value as PlannerAlgorithm);\n  };\n\n  const onSubmit = (event: FormEvent) => {\n    props.onSubmitted(processString, selectedAlgorithm);\n    event.preventDefault();\n  };\n\n\n  return (\n    <form onSubmit={onSubmit}>\n      <h1>OS kodutöö 3, kettapöörete visualisatsioon</h1>\n      <h5>Sander Nemvalts</h5>\n      <h2>Testmuster: </h2>\n      <input type=\"text\"\n             pattern=\"^((\\d\\d?,?){1,12})$\"\n             value={processString}\n             className='pattern-input'\n             onChange={onInput}/>\n\n      <div className=\"radio-container\">\n        <div>\n          <label>\n          <input type=\"radio\"\n                 value='1'\n                 name='first'\n                 checked={selectedProcess === '1'}\n                 onChange={onRadioClick}/>\n          Esimene näidismuster</label>\n        </div>\n        <div>\n          <label>\n          <input type=\"radio\"\n                 value='2'\n                 name='second'\n                 checked={selectedProcess === '2'}\n\n                 onChange={onRadioClick}/>\n          Teine näidismuster</label>\n        </div>\n        <div>\n          <label>\n          <input type=\"radio\"\n                 value='3'\n                 name='third'\n                 checked={selectedProcess === '3'}\n                 onChange={onRadioClick}/>\n          Kolmas näidismuster\n          </label>\n        </div>\n      </div>\n\n      <div className=\"radio-container\">\n        <div>\n          <label>\n            <input type=\"radio\"\n                   value='NOOP'\n                   name='NOOP'\n                   checked={selectedAlgorithm === 'NOOP'}\n                   onChange={onAlgorithmClick}/>\n            NOOP (FCFS)</label>\n        </div>\n        <div>\n          <label>\n            <input type=\"radio\"\n                   value='SSTF'\n                   name='SSTF'\n                   checked={selectedAlgorithm === 'SSTF'}\n                   onChange={onAlgorithmClick}/>\n            SSTF</label>\n        </div>\n        <div>\n          <label>\n            <input type=\"radio\"\n                   value='SCAN'\n                   name='SCAN'\n                   checked={selectedAlgorithm === 'SCAN'}\n                   onChange={onAlgorithmClick}/>\n            SCAN</label>\n        </div>\n        <div>\n          <label>\n            <input type=\"radio\"\n                   value='LOOK'\n                   name='LOOK'\n                   checked={selectedAlgorithm === 'LOOK'}\n                   onChange={onAlgorithmClick}/>\n            LOOK</label>\n        </div>\n      </div>\n\n      <button type=\"submit\">Näita kettapea visualisatsiooni</button>\n    </form>\n  )\n};\n\nexport default ProcessInput;\n","import React, {useState, useEffect, useRef} from 'react';\nimport ProcessInput, {PlannedSectorVisits } from '../../App';\nimport './SpinDisplay.css';\nconst SpinDisplay: React.FC<{visits: PlannedSectorVisits, displayed: boolean}> = (props) => {\n\n  // @ts-ignore\n  const canvas = useRef(null);\n\n  const [distance, setDistance] = useState<number | null>(null);\n\n  useEffect(() => {\n    if (canvas) {\n      // @ts-ignore\n      const ctx: CanvasRenderingContext2D = canvas.current.getContext(\"2d\");\n      ctx.fillStyle = 'black';\n      // @ts-ignore\n      ctx.clearRect(0, 0, canvas.current.width, canvas.current.height);\n\n\n      const paddingX = 50;\n      const paddingY = 50;\n\n      for(let i = 0; i < 50; i++) {\n        ctx.font = '10px Arial';\n        ctx.fillText(`${i}`, paddingX + ((i / 50) * 700), paddingY * 0.5);\n        if (props.visits.findIndex(visit => visit === i && visit >= 0) !== -1) {\n          if (i >= 10) {\n            ctx.fillText(`X`, paddingX + ((i / 50) * 700) + 2.5, paddingY * 0.75);\n          } else {\n            ctx.fillText(`X`, paddingX + ((i / 50) * 700), paddingY * 0.75);\n          }\n        }\n      }\n\n      let visitsWithReaderHeadStart = [...props.visits];\n      if (props.visits[0] !== 10) {\n        visitsWithReaderHeadStart = [10, ...props.visits];\n      }\n\n      let totalDistance = 0;\n      let lastPos = 10;\n\n      ctx.beginPath();\n      visitsWithReaderHeadStart.forEach((visit: number, i) => {\n        const xPosition = paddingX + ((Math.abs(visit) / 50) * 700);\n        const yPosition = paddingY + ((i / props.visits.length) * 300);\n\n        ctx.lineTo(xPosition + 5, yPosition + 3.5);\n        ctx.fillRect(xPosition, yPosition, 7., 7.5);\n\n        if (visit > 0) {\n          totalDistance += Math.abs(visit - lastPos);\n        }\n        lastPos = visit;\n\n      });\n\n      setDistance(totalDistance);\n      ctx.stroke();\n\n    }\n  }, [props.visits]);\n\n  return (\n    <div className=\"MemoryDisplay\">\n      {distance !== null ? (<span>distants: {distance}</span>) : null}\n      <canvas ref={canvas} width={800} height={400}></canvas>\n    </div>\n  );\n};\n\n\nexport default SpinDisplay\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport ProcessInput from './components/processinput/ProcessInput';\nimport SpinDisplay from './components/spindisplay/SpinDisplay';\n\nconst App: React.FC = () => {\n  const [diskSpinString, setDiskSpinString] = useState<string>('');\n  const [diskPlannerAlgorithm, setDiskPlannerAlgorithm] = useState<PlannerAlgorithm | null>(null);\n  const [showSpin, setShowSpin] = useState(false);\n  const [displayedSectorVisits, setDisplayedSectorVisits] = useState<PlannedSectorVisits>([]);\n\n  const handleSubmit = (diskSpinString: string, algorithm: PlannerAlgorithm) => {\n    setDiskSpinString(diskSpinString);\n    setDiskPlannerAlgorithm(algorithm);\n    setShowSpin(true);\n  };\n\n\n\n\n  useEffect(() => {\n    // TODO: process it\n    const parsedDiskSpinString = parseDiskSpinString(diskSpinString);\n\n    if (diskPlannerAlgorithm === 'NOOP') {\n      setDisplayedSectorVisits(NOOP(parsedDiskSpinString));\n    }\n\n    if (diskPlannerAlgorithm === 'SSTF') {\n      setDisplayedSectorVisits(SSTF(parsedDiskSpinString));\n    }\n\n    if (diskPlannerAlgorithm === 'SCAN') {\n      setDisplayedSectorVisits(SCAN(parsedDiskSpinString));\n    }\n\n    if (diskPlannerAlgorithm === 'LOOK') {\n      setDisplayedSectorVisits(LOOK(parsedDiskSpinString));\n    }\n\n  }, [diskSpinString, diskPlannerAlgorithm]);\n\n\n  const parseDiskSpinString = (diskSpinString: string) => {\n    return diskSpinString.split(',').map(number => parseInt(number));\n  };\n\n\n  return (\n    <div className=\"App\">\n      <ProcessInput onSubmitted={handleSubmit}/>\n      <SpinDisplay displayed={showSpin} visits={displayedSectorVisits}/>\n    </div>\n  );\n};\n\n\nconst NOOP = (sectors: number[]) => {\n  const finalSectors: number[] = [];\n  let currentPosition = 10;\n\n  sectors.forEach((sector) => {\n    if (currentPosition !== sector) {\n      currentPosition = sector;\n      finalSectors.push(sector);\n    }\n  });\n\n  return finalSectors;\n};\n\nconst SSTF = (sectors: number[]) => {\n  const sectorsToProcess = [...sectors];\n  const finalSectors: number[] = [];\n\n  let currentPosition = 10;\n\n\n  while(sectorsToProcess.length > 0) {\n    console.log('==============');\n    let sectorSmallestDistance = 50;\n    let sectorSmallestDistanceIndex = -1;\n\n    sectorsToProcess.forEach((sector, index) => {\n      console.log(sector,currentPosition);\n      if (Math.abs(sector - currentPosition) < sectorSmallestDistance) {\n        sectorSmallestDistance = Math.abs(sector - currentPosition);\n        sectorSmallestDistanceIndex = index;\n      }\n    });\n\n\n    finalSectors.push(sectorsToProcess[sectorSmallestDistanceIndex]);\n    currentPosition = sectorsToProcess[sectorSmallestDistanceIndex];\n    sectorsToProcess.splice(sectorSmallestDistanceIndex, 1);\n  }\n\n  return finalSectors;\n};\n\nconst SCAN = (sectors: number[]) => {\n  const sectorsToProcess = [...sectors];\n  const finalSectors: number[] = [];\n\n  let currentPosition = 10;\n\n  let forwardOrBackward: 'FORWARD' | 'BACKWARD' = 'FORWARD';\n  while(sectorsToProcess.length > 0) {\n    console.log('==============');\n\n    let found = false;\n\n    let closestDistance = 50;\n    let closestIndex = 0;\n\n    sectorsToProcess.forEach((sector, i) => {\n      if (forwardOrBackward === 'FORWARD' && sector >= currentPosition && Math.abs(sector - currentPosition) < closestDistance) {\n        closestDistance = Math.abs(sector - currentPosition);\n        closestIndex = i;\n        found = true;\n      }\n\n      if (forwardOrBackward === 'BACKWARD' && sector <= currentPosition && Math.abs(sector - currentPosition) < closestDistance) {\n        closestDistance = Math.abs(sector - currentPosition);\n        closestIndex = i;\n        found = true;\n      }\n    });\n\n    if (found) {\n      finalSectors.push(sectorsToProcess[closestIndex]);\n      currentPosition = sectorsToProcess[closestIndex];\n      sectorsToProcess.splice(closestIndex, 1);\n    } else {\n      if (forwardOrBackward === 'FORWARD') {\n        currentPosition = 49;\n        finalSectors.push(-49);\n      } else {\n        currentPosition = 0;\n        finalSectors.push(0);\n      }\n      forwardOrBackward = forwardOrBackward === 'FORWARD' ? 'BACKWARD' : 'FORWARD';\n    }\n\n  }\n\n  return finalSectors;\n};\n\nconst LOOK = (sectors: number[]) => {\n  const sectorsToProcess = [...sectors];\n  const finalSectors: number[] = [];\n\n  let currentPosition = 10;\n\n  let forwardOrBackward: 'FORWARD' | 'BACKWARD' = 'FORWARD';\n  while(sectorsToProcess.length > 0) {\n    console.log('==============');\n\n    let found = false;\n\n    let closestDistance = 50;\n    let closestIndex = 0;\n\n    sectorsToProcess.forEach((sector, i) => {\n      if (forwardOrBackward === 'FORWARD' && sector >= currentPosition && Math.abs(sector - currentPosition) < closestDistance) {\n        closestDistance = Math.abs(sector - currentPosition);\n        closestIndex = i;\n        found = true;\n      }\n\n      if (forwardOrBackward === 'BACKWARD' && sector <= currentPosition && Math.abs(sector - currentPosition) < closestDistance) {\n        closestDistance = Math.abs(sector - currentPosition);\n        closestIndex = i;\n        found = true;\n      }\n    });\n\n    if (found) {\n      finalSectors.push(sectorsToProcess[closestIndex]);\n      currentPosition = sectorsToProcess[closestIndex];\n      sectorsToProcess.splice(closestIndex, 1);\n    } else {\n      forwardOrBackward = forwardOrBackward === 'FORWARD' ? 'BACKWARD' : 'FORWARD';\n    }\n\n  }\n\n  return finalSectors;\n};\nexport default App;\nexport type PlannerAlgorithm = 'NOOP' | 'SSTF' | 'SCAN' | 'LOOK';\n\nexport type PlannedSectorVisits = number[];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}